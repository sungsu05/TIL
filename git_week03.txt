issue
 > 누가 이작업을 할것인가? : 이슈 할당
branch
 > 각자 맡은 것을 작업한다
merge(병합)
 > 각자 작업을 프로젝트에 합친다

체크아웃
 > 프렌치 선택
> 체크아웃한 프렌치 마다 작업내역이 다름,

프렌치 삭제시 그 브렌치에 해당하는 작업 내역이 삭제됨

merge
 여러 branch 의 commit 내역을 합친다

서로 다른 branch는 각자의 파일만을 수정해야한다
 a 브런치는 a 파일 , b 브런치는 b 파일
 오류(충돌) > a 브런치 b 파일 수정 , b 브런치 a 파일 수정

branch 는 각각의 작업 공간을 부여한다.
따라서 할당된 각각의 작업만을 다루는것이 적합하다.

tranking는 branch단위로 동작한다.

commit 되돌리면 다른 사람의 작업 히스토리도 꼬임
따라서  나만 작업하는 특정 브렌치가 있어야 한다

강제 푸쉬는 나만 사용하는 작업에서 해야함(위험)
push한것을 수정하기 위해서는 강제 push 해야함

revert 되돌리기
기록을 남기며 되돌림

reset 지정한 위치로 되돌아가며 중간 수정
내역은 사라짐 
 > 우클릭 초기화

stash
작업한 내용을 임시적으로 보관

commit하지 않고 체크아웃을 해제하면
종종 작업 내용이 사라질 수 있다
그렇기에 stash를 사용

commit 은 수정내용을 자세히 작성
요구사항이 있다면 그에 맞춰 작성

commit의 시기는 적절한 시기에 한다.

키워드 - 기능, 단위 #issue번호 

변경사항 : 

# 키워드: 생성, 수정, 추가,고치기,문서화,스타일, 테스트 
# "왜", "무엇"을 포함하기 
# 제목은 80자 이내로, 긴 내용은 줄바꿈하고 본문에서

코드리뷰 < 회의,서로 피드백 주기 >
issue > commits >pr > reveiw > commits > merge

readme.md
소개파일
md > 마크다운


버전관리
commit : 유의미한 변화를 등록
pull : 로컬 환경으로 불러오기
push : github등록
branch : 각자의 작업 공간
merge : 병합
amend : commit 수정
revert : 변경사항 되돌리며 기록
reset : 기록을 되돌림
stash  : 프로젝트 변경사항 임시 보관
